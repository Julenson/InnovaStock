// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview An AI agent that analyzes historical usage data and suggests reorder points for materials.
 *
 * - predictReorderPoints - A function that handles the prediction of reorder points.
 * - PredictReorderPointsInput - The input type for the predictReorderPoints function.
 * - PredictReorderPointsOutput - The return type for the predictReorderPoints function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const PredictReorderPointsInputSchema = z.object({
  historicalUsageData: z
    .string()
    .describe(
      'Historical usage data of materials, including material name, date, and quantity used.'
    ),
  leadTimeDays: z
    .number()
    .describe(
      'The typical lead time in days required to replenish each material after placing an order.'
    ),
  desiredStockLevelDays: z
    .number()
    .describe(
      'The desired number of days of stock to have on hand to avoid shortages.'
    ),
});
export type PredictReorderPointsInput = z.infer<typeof PredictReorderPointsInputSchema>;

const PredictReorderPointsOutputSchema = z.object({
  reorderSuggestions: z.array(
    z.object({
      materialName: z.string().describe('The name of the material.'),
      reorderPoint: z
        .number()
        .describe(
          'The suggested reorder point for the material, indicating when to reorder.'
        ),
      reasoning: z
        .string()
        .describe(
          'Explanation for how the reorder point was calculated, including factors considered.'
        ),
    })
  ),
});
export type PredictReorderPointsOutput = z.infer<typeof PredictReorderPointsOutputSchema>;

export async function predictReorderPoints(
  input: PredictReorderPointsInput
): Promise<PredictReorderPointsOutput> {
  return predictReorderPointsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'predictReorderPointsPrompt',
  input: {schema: PredictReorderPointsInputSchema},
  output: {schema: PredictReorderPointsOutputSchema},
  prompt: `You are an AI assistant specializing in inventory management and supply chain optimization.

  Analyze the historical usage data of materials to determine optimal reorder points. 
  Consider the lead time for replenishment and the desired stock levels to avoid shortages.

  Historical Usage Data: {{{historicalUsageData}}}
  Lead Time (Days): {{{leadTimeDays}}}
  Desired Stock Level (Days): {{{desiredStockLevelDays}}}

  Based on this information, provide reorder point suggestions for each material. 
  Include the material name, the suggested reorder point (quantity), and a brief explanation 
  of how the reorder point was calculated.

  Ensure that your recommendations are practical and aimed at minimizing stockouts while avoiding excessive inventory.

  Format your reorder point suggestions as a JSON array of objects, where each object includes:
  - materialName (string): The name of the material.
  - reorderPoint (number): The suggested reorder point for the material.
  - reasoning (string): Explanation for how the reorder point was calculated.
  `,
});

const predictReorderPointsFlow = ai.defineFlow(
  {
    name: 'predictReorderPointsFlow',
    inputSchema: PredictReorderPointsInputSchema,
    outputSchema: PredictReorderPointsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
