// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview An AI agent that analyzes historical usage data and suggests reorder points for materials.
 *
 * - predictReorderPoints - A function that handles the prediction of reorder points.
 * - PredictReorderPointsInput - The input type for the predictReorderPoints function.
 * - PredictReorderPointsOutput - The return type for the predictReorderPoints function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';
import { getAllMaterials } from '../../../db/managedb';

const PredictReorderPointsInputSchema = z.object({
  //historicalUsageData: z
  //  .string()
  //  .describe(
  //    'Historical usage data of materials, including material name, date, and quantity used.'
  //  ),
  leadTimeDays: z
    .number()
    .describe(
      'El plazo de entrega típico en días necesario para reponer cada material después de realizar un pedido.'
    ),
  desiredStockLevelDays: z
    .number()
    .describe(
      'El número deseado de días de stock a tener a mano para evitar escasez.'
    ),
});
export type PredictReorderPointsInput = z.infer<typeof PredictReorderPointsInputSchema>;

const PredictReorderPointsOutputSchema = z.object({
  reorderSuggestions: z.array(
    z.object({
      materialName: z.string().describe('El nombre del material.'),
      reorderPoint: z
        .number()
        .describe(
          'El punto de reorden sugerido para el material, que indica cuándo reordenarlo.'
        ),
      reasoning: z
        .string()
        .describe(
          'Explicación de cómo se calculó el punto de reorden, incluidos los factores considerados.'
        ),
    })
  ),
});
export type PredictReorderPointsOutput = z.infer<typeof PredictReorderPointsOutputSchema>;

export async function predictReorderPoints(
  input: PredictReorderPointsInput
): Promise<PredictReorderPointsOutput> {
  return predictReorderPointsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'predictReorderPointsPrompt',
  input: {schema: PredictReorderPointsInputSchema},
  output: {schema: PredictReorderPointsOutputSchema},
  prompt: `Eres un asistente de IA especializado en la gestión de inventario y la optimización de la cadena de suministro.

  Analiza el historial de uso de materiales para determinar los puntos de reorden óptimos.
  Considera el plazo de reposición y los niveles de stock deseados para evitar la escasez.

  Datos históricos de uso: {{{historicalUsageData}}}
  Plazo de entrega (días): {{{leadTimeDays}}}
  Nivel de stock deseado (días): {{{desiredStockLevelDays}}}

  Con base en esta información, proporciona sugerencias de puntos de reorden para cada material.
  Incluye el nombre del material, el punto de reorden sugerido (cantidad) y una breve explicación de cómo se calculó.

  Asegúrate de que tus recomendaciones sean prácticas y estén orientadas a minimizar la falta de existencias, evitando un inventario excesivo.

  Formatea tus sugerencias de puntos de reorden como una matriz JSON de objetos, donde cada objeto incluye:
  - materialName (cadena): El nombre del material.
  - reorderPoint (número): El punto de reorden sugerido para el material. - razonamiento (cadena): Explicación de cómo se calculó el punto de reorden.
  `,
});

const predictReorderPointsFlow = ai.defineFlow(
  {
    name: 'predictReorderPointsFlow',
    inputSchema: PredictReorderPointsInputSchema,
    outputSchema: PredictReorderPointsOutputSchema,
  },
  async input => {
    const materials = await getAllMaterials();
    const historicalUsageDataString = materials.map(m =>
      `Material: ${m.name}, Cantidad: ${m.quantity}`
    )
    const pomptInput = {
      historicalUsageData: historicalUsageDataString,
      leadTimeDays: input.leadTimeDays,
      desiredStockLevelDays: input.desiredStockLevelDays,
    };
    const {output} = await prompt(pomptInput);
    return output!;
  }
);
